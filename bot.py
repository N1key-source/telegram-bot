import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TOKEN = os.getenv("BOT_TOKEN")   # –±–æ—Ç –≤–æ–∑—å–º—ë—Ç —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_ID = int(os.getenv("ADMIN_ID"))  # –∏ –∞–π–¥–∏ —Ç–æ–∂–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REF_LINK = "https://www.bitrue.com/referral/landing?cn=600000&inviteCode=TZLLALV"  # —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
COPYTRADING_LINK = "https://www.bitrue.com/copy-trading/trader/2833136590890188833"  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è user_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
pending_users = {}

# === –°–¢–ê–†–¢ ===
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n"
        "–í–æ—Ç —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        f"{REF_LINK}\n\n"
        "–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

# === –ü–û–õ–£–ß–ê–ï–ú –°–ö–†–ò–ù–®–û–¢ ===
@dp.message_handler(content_types=["photo"])
async def handle_screenshot(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Å–∫—Ä–∏–Ω
    await message.forward(chat_id=ADMIN_ID)

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}")
    )

    await bot.send_message(
        ADMIN_ID,
        f"üì© –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç @{username} (ID: {user_id})",
        reply_markup=keyboard
    )

    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    pending_users[user_id] = message.chat.id

    await message.answer("‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞!")

# === –û–ë–†–ê–ë–û–¢–ö–ê –í–´–ë–û–†–ê –ê–î–ú–ò–ù–ê ===
@dp.callback_query_handler(lambda c: c.data.startswith(("approve", "reject")))
async def process_callback(callback: types.CallbackQuery):
    action, user_id = callback.data.split("_")
    user_id = int(user_id)

    if action == "approve":
        await bot.send_message(user_id, f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n–í–æ—Ç —Å—Å—ã–ª–∫–∞: {COPYTRADING_LINK}")
        await callback.message.edit_text("‚úÖ –í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞—è–≤–∫—É.")
    else:
        await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await callback.message.edit_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.")

    await callback.answer()

# === –°–¢–ê–†–¢ –ë–û–¢–ê ===
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
